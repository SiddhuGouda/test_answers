/For Second Question/


In java only objects & primitive data types can be passed to method of a class.
Java support of interfaces provides a mechanism by which we can get the equivalent of callback.
You should declare an interface which declares the function you want to pass.There are two types of callbacks you can make in java namely Synchronous Callback & Asynchronous Callback.
In case of synchronous callback the code will not execute further until callback is executed
While in case of asynchronous callback the code will be executed 

/*==================================
 Java program to ReverseString using StringBuilder
==================================*/
import java.lang.*;
import java.io.*;
import java.util.*;
 
interface CallBack {
    void methodToCallBack(String str);
}

class CallBackImpl implements CallBack {
    public void methodToCallBack(String str) {
        System.out.println("String before reverse: " + str);
       
        StringBuilder input1 = new StringBuilder();
 
        // append a string into StringBuilder input1
        input1.append(str);
 

        // reverse StringBuilder input1
        input1 = input1.reverse();
 
        // print reversed String
        System.out.print("String after reverse ");
        for (int i=0; i<input1.length(); i++)
            System.out.print(input1.charAt(i));
    }
}

public class ReverseString {

      System.out.println("Enter your String Input: ");
      Scanner scanner = new Scanner(System.in);
      String input = scanner.nextLine();
      
 
    public void reverse(CallBack callback) {
        callback.methodToCallBack(input);
    }

    public static void main(String[] args) {
        ReverseString obj = new ReverseString();
        CallBack callBack = new CallBackImpl();
        obj.reverse(callBack);
    }
} 
